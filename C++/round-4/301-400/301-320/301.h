class Solution {
public:
    vector<string> removeInvalidParentheses(string s) {
        vector<string> result;
        
        queue<string> data;
        data.push(s);
        unordered_set<string> visited;
        visited.insert(s);
        
        while (!data.empty()) {
            string curr = data.front();
            data.pop();

            // 1. Current string can't be optimal, no need to do parenthesis check
            if (result.size() > 0 && result[0].size() > curr.size())
                continue;
            
            // 2. If current string is valid, no need to serach its substrings.
            if (isValid(curr)) {
                result.push_back(curr);
            }
            // 3. Search all substrings generated by removing '(' or ')'.
            else {
                for (int i = 0; i < curr.size(); ++i) {
                    if (curr[i] != '(' && curr[i] != ')')
                        continue;
                    string next = curr;
                    next.erase(next.begin() + i);
                    if (visited.find(next) != visited.end())
                        continue;
                    data.push(next);
                    visited.insert(next);
                }
            }
        }
        return result;
    }
    
private:
    bool isValid(string &s) {
        int count = 0;
        for (char c : s) {
            if (c == '(')
                ++count;
            else if (c == ')') {
                if (--count < 0)
                    return false;
            }
        }
        return count == 0;
    }
};